#!/usr/bin/python
# -*- coding: latin1 -*-

"""
A wrapper_creator for B-Fabric
Gets an external job id from B-Fabric
Creates an executable for the submitter

after successfull uploading the executables the wrapper creator creates an
externaljob
"""

# Copyright (C) 2014 Functional Genomics Center Zurich ETHZ|UZH. All rights reserved.
#
# Authors:
#   Marco Schmid <marco.schmidt@fgcz.ethz.ch>
#   Christian Panse <cp@fgcz.ethz.ch>
#
# Licensed under  GPL version 3
#
# $HeadURL: http://fgcz-svn.uzh.ch/repos/scripts/trunk/linux/bfabric/apps/python/wrapper_creator.py $
# $Id: wrapper_creator.py 1289 2014-01-31 06:49:24Z cpanse $ 

import os
import sys
import base64
import bfabric
import datetime

if __name__ == "__main__":
    """
    wrapper_creator -j 12345 
    """
    externaljobid=-1
    if len(sys.argv) == 3 and sys.argv[1] == '-j' and int(sys.argv[2]) > 0:
        externaljobid = int(sys.argv[2])
    else:
        print "usage: " + sys.argv[0] + " -j <externaljobid>"    
        sys.exit(1)

    bfapp = bfabric.WrapperCreator(login='pfeeder', externaljobid=externaljobid)

    workunitid = bfapp.get_workunitid_of_externaljob()

    if workunitid is None:
        print "ERROR: no workunit available for the given externaljobid."
        sys.exit(1)

    workunit = bfapp.read_object(endpoint='workunit', obj={'id': workunitid})

    if workunit is None:
        print "ERROR: no workunit available for the given externaljobid."
        sys.exit(1)

    # collects all required information out of B-Fabric to create an executable script
    workunit = workunit[0]

    application=bfapp.read_object('application', obj={'id':workunit.application._id})[0]
    executable=bfapp.read_object('executable', obj={'id': workunit.applicationexecutable._id})[0]
    project=workunit.project
    today = datetime.date.today()

    # merge all information into the executable script
    _outputStorage=bfapp.read_object('storage', obj={'id': application.storage._id})[0]
    _outputRelativePath = '/p' + str(project._id) + '/bfabric/' + str(application.technology).replace(' ', '_') + '/' + str(application.name).replace(' ', '_') + '/' + today.strftime('%Y/%Y-%m/%Y-%m-%d/') + 'workunit_' + str(workunitid) + '/'

    _logStorage=bfapp.read_object('storage', obj={'id': 8})[0]

    _cmd_script_header_list = ["#!/bin/bash\n", 
        "# generated by executing \n",
        "# $HeadURL: http://fgcz-svn.uzh.ch/repos/scripts/trunk/linux/bfabric/apps/python/wrapper_creator.py $\n",
        "# $Id: $\n\n",
        "echo $0\n",
        "export PATH=$PATH:/bin/:/usr/bin/\n\n",
        "hostname\n",
        "pwd\n",
        "WORKUNIT=" + str(workunit._id) + "\n",
        "ssh " + _outputStorage.host + " 'mkdir -p " + _outputStorage.basepath + _outputRelativePath + "' || exit 1\n"]

    _cmd_applicationList = [ executable.program ]

    for parameter in workunit.parameter:
        parameter = bfapp.read_object('parameter', obj={'id':parameter._id, 'context':'APPLICATION'})
        if parameter:
            for p in parameter:
                _cmd_applicationList.extend([" " , "--", p.key, " ", p.value])

    for resource in workunit.inputresource:
        _inputResource = bfapp.read_object('resource', {'id':resource._id})[0]
        _inputStorage = bfapp.read_object('storage', {'id':_inputResource.storage._id})[0]


        res0 = bfapp.save_object('resource', { 
            'name': application.name + ' resource', 
            'workunitid': workunit._id,
            'storageid': 2,
            'relativepath':  _outputRelativePath})[0]
        bfapp.logger('created a resource id=' + str(res0._id))

        _outputFilename = str(res0._id) + '.' + application.outputfileformat

        _gridengine_err_file = '/workunitid-' + str(workunit._id) + '_' + 'resourceid-' + str(res0._id) + '.err'
        _gridengine_out_file = '/workunitid-' + str(workunit._id) + '_' + 'resourceid-' + str(res0._id) + '.out'

        _res_err = bfapp.save_object('resource', { 
            'name': 'grid_engine_stderr', 
            'workunitid': workunit._id,
            'storageid': 8,
            'relativepath': _gridengine_err_file})[0]
        bfapp.logger('created a resource id=' + str(_res_err._id))

        _res_out = bfapp.save_object('resource', { 
            'name': 'grid_engine_stdout', 
            'workunitid': workunit._id,
            'storageid': 8,
            'relativepath': _gridengine_out_file})[0]
        bfapp.logger('created a resource id=' + str(_res_out._id))

        resNewExternaljob0 =bfapp.save_object('externaljob', {"workunitid": workunit._id, 
            'status': 'new', 
            'action': "WORKUNIT"})[0] 


        _cmd_script_list=list()
        _cmd_script_list.extend(_cmd_script_header_list[:])
        _cmd_script_list.extend(["#$ -e ", _logStorage.basepath + _gridengine_err_file, '\n'])
        _cmd_script_list.extend(["#$ -o ", _logStorage.basepath + _gridengine_out_file, '\n'])
        _cmd_script_list.extend(["EXTERNALJOB=", str(resNewExternaljob0._id), '\n'])
        _cmd_script_list.extend(["ssh -o StrictHostKeyChecking=no ", _inputStorage.host, " 'cat ", _inputStorage.basepath, _inputResource.relativepath, "' | "])
        _cmd_script_list.extend(_cmd_applicationList)
        _cmd_script_list.extend([" | "])
        _cmd_script_list.extend(["ssh -o StrictHostKeyChecking=no ", _outputStorage.host, " 'cat > ", _outputStorage.basepath + _outputRelativePath + '/' + _outputFilename, "' \n"])
        _cmd_script_list.extend(["\n"])
        _cmd_script_list.extend(["sleep 5"])
        _cmd_script_list.extend(["\n"])
        _cmd_script_list.extend(["ssh -o StrictHostKeyChecking=no ", _outputStorage.host,  " '/home/bfabric/.python/fgcz_bfabric_setResourceStatus_available.py " + str(res0._id) + " " + str(_res_err._id) + " " + str(_res_out._id) + " && /home/bfabric/.python/fgcz_bfabric_setExternalJobStatus_done.py "+ str(resNewExternaljob0._id)  +"'"])
        _cmd_script_list.extend(["\n"])


        res1 = bfapp.save_object('resource', { 
            'id': res0._id, 
            'relativepath':  _outputRelativePath + '/' + _outputFilename})

        bfapp.logger(str(res1))

        bfapp.logger('I am alive!')
        # upoload the ready to run script to B-Fabric as base64 encoded file
        resExecutable = bfapp.save_object('executable', { 'name': os.path.basename(executable.program) + "_executable", 
            'context': 'WORKUNIT', 
            'parameter': None, 
            'description': "This script should run as 'bfabric' user in the FGCZ compute infrastructure.", 
            'workunitid': workunitid,
            'base64': base64.b64encode(''.join(_cmd_script_list)),
            'version': 0.1})[0]

        bfapp.logger('added executable id = ' + str(resExecutable._id))
        bfapp.logger(str(resExecutable))

        resNewExternaljob1 =bfapp.save_object('externaljob', {"id": resNewExternaljob0._id, 'executableid': resExecutable._id })

        bfapp.logger('added Externaljob = ' + str(resNewExternaljob0._id))

    resExternaljob = bfapp.save_object(endpoint='externaljob', obj={'id':externaljobid, 'status':'done'})
