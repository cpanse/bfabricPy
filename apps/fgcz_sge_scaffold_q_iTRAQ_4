#!/bin/bash -x
#$ -N fgcz_sge_scaffold
#$ -S /bin/bash
#$ -q scaffold

. /home/bfabric/sgeworker/bin/fgcz_sge_initng.sh
test $? -gt 0 && (echo "init failed" ; exit 1)

# by Simon Barkow & Christian Panse  <{sb,cp}@fgcz.ethz.ch>
# January / February 2009

# Example:
# qsub ./fgcz_sge_scaffold -i 130.60.81.23 -j /usr/local/mascot/data/20100127/F107346.dat -o 130.60.81.23 -p /tmp/$USER.$$.F107346.sf3

# TODO:
# o read INPUTFILES from /dev/stdin if argument list get buffer problems
# o enable USER options in B-Fabric, e.g., -t TRUE (-t =^ Tandem.exe). 


# SET MANDATORY PARAMETERS
CONTACT="Simon Barkow <sb@fgcz.ethz.ch>"
LASTMODIFIED="Wed Feb 11 13:24:25 CET 2009"
LASTMODIFIED="Tue Apr 21 14:03:37 CEST 2009"
LASTMODIFIED="Wed Jan 27 14:05:20 CET 2010"
LASTMODIFIED="Mon Jul 12 11:44:57 CEST 2010"
LASTMODIFIED="Mon Nov  1 10:02:32 CET 2010"
LASTMODIFIED="Wed Nov  3 16:07:24 CET 2010"
LASTMODIFIED="Thu Jan  6 09:46:13 CET 2011"

OPTIND=1
SCRATCHSPACE=/scratch/fgcz_sge_scaffold/
SCPOPTION="-o VerifyHostKeyDNS=no -c arcfour"

#mySCAFFOLD=/usr/local/FGCZ/SCAFFOLD/scaffoldBatchStarter.sh 
mySCAFFOLD=/usr/local/FGCZ/SCAFFOLD/ScaffoldBatch4
mySCAFFOLDDRIVER=$SCRATCHSPACE/$$.scaffold-driver.xml

randomsleep 10


myScaffoldDriverGenerator() {
	# take Fasta db from first dat files of $INPUTFILE
	firstDat=`echo $INPUTFILE | cut -d',' -f1`
	test $? -gt 0 && die "getting 'firstDat' failed"

	test ! -f $firstDat && die "Cannot acces '$firstDat'."

# 	fastaDBName=`head -n 150 $firstDat | grep "^DB=" | cut -d'=' -f2`
# 	test $? -gt 0 && die "getting 'fastaDBName' failed (probably cannot find DB)"
# 	test -z $fastaDBName && die "'fastaDBName' not specified."

	fastaDBName=`head -n 1500 $firstDat | grep "^release=" | cut -d'=' -f2`
	
	fastaDBPath=`find /imports/share/fgcz/db/ | grep "$fastaDBName" | grep ".fasta$" | tail -n1`
	test $? -gt 0 && die "getting 'fastaDBPath' failed"
	test ! ${#fastaDBPath} -gt 0 && die "Cannot acces '$fastaDBName'. Fasta DB is probably not in /imports/share/fgcz/db/"
		
	# get instrument name for accuracy settings
	instrumentName=`head -n 1500 $firstDat | grep "^INSTRUMENT=" | cut -d'=' -f2`

	# get mgf file name for naming of the sample
	mgfName=`head -n 1500 $firstDat | grep "^FILE=" | awk -F\\\\\\\\ '{print $(NF) ;}' | cut -d'=' -f2 `

	# get searchTitle name for naming of the sample
	searchTitle=`head -n 1500 $firstDat | grep "^COM=" | cut -d'=' -f2 | sed -e 's/[>|<]/_/g'`
		
	experimentName="Workunit_$WORKUNITID"
	test $? -gt 0 && die "getting 'experimentName' failed"
	
	echo "<Scaffold>" \
	> $mySCAFFOLDDRIVER

	echo "<Experiment name='$experimentName'  analyzeWithTandem='false' connectToNCBI='false' condenseDataWhileLoading='true' annotateWithGOA='true' unimodFile=''" \
	>> $mySCAFFOLDDRIVER

	# check whether the instrument is high accuray
	if [ $instrumentName == 'TSQ Default' ] || [ $instrumentName  == 'LTQ_1' ] || [ $instrumentName == 'ESI QUAD' ]; then 
		echo ">" >> $mySCAFFOLDDRIVER 
	else 
		echo "highMassAccuracyScoring='true' >" >> $mySCAFFOLDDRIVER 
	fi
	
	echo "<FastaDatabase id=\"$fastaDBName\" path=\"$fastaDBPath\" databaseAccessionRegEx=\">([^ ]*)\" databaseDescriptionRegEx=\">[^ ]* (.*)\" decoyProteinRegEx=\"REV_|rr\|\" />" \
	>> $mySCAFFOLDDRIVER
	
	# Use this, if you want to have all dat Files together in one Biological Sample
	echo "<BiologicalSample database='$fastaDBName' analyzeAsMudpit='true' name='$searchTitle' category='$searchTitle' >" \
	>> $mySCAFFOLDDRIVER

# enter here Quant info:
	echo "<QuantitativeModel type=\"iTRAQ 4-Plex\"> \
        <QuantitativeSample category=\"\" description=\"\" name=\"Quant 1\" \
          primary=\"true\" reporter=\"iTRAQ-114\"/> \
        <QuantitativeSample category=\"\" description=\"\" name=\"Quant 2\" \
          primary=\"false\" reporter=\"iTRAQ-115\"/> \
        <QuantitativeSample category=\"\" description=\"\" name=\"Quant 3\" \
          primary=\"false\" reporter=\"iTRAQ-116\"/> \
        <QuantitativeSample category=\"\" description=\"\" name=\"Quant 4\" \
          primary=\"false\" reporter=\"iTRAQ-117\"/> " \
          >> $mySCAFFOLDDRIVER
          
    echo "<PurityCorrection>" >> $mySCAFFOLDDRIVER
	echo "0.000,0.01000,0.925,0.0630,0.00200"  >> $mySCAFFOLDDRIVER
	echo "0.000,0.0200,0.919,0.0600,0.001000"  >> $mySCAFFOLDDRIVER
	echo "0.000,0.0300,0.920,0.0490,0.001000"  >> $mySCAFFOLDDRIVER
	echo "0.001000,0.0400,0.920,0.0380,0.001000"  >> $mySCAFFOLDDRIVER
	echo '</PurityCorrection> </QuantitativeModel>'  >> $mySCAFFOLDDRIVER
    

	IFS=','
	for i in $INPUTFILE ;
	do
		echo "<InputFile>$i</InputFile>";
	done \
	>> $mySCAFFOLDDRIVER

	echo "</BiologicalSample>" \
	>> $mySCAFFOLDDRIVER


	echo "<DisplayThresholds name='95%' 
		id='thresh' 
		proteinProbability='0.95' 
		minimumPeptideCount='2' 
		peptideProbability='0.95'/>" \
	>> $mySCAFFOLDDRIVER

	mkdir -p $SCRATCHSPACE/$$.scaffold || die "'mkdir -p $SCRATCHSPACE/$$.scaffold' failed"

	echo "<Export type='sfd' 
		thresholds='thresh' 
		path='$SCRATCHSPACE/$$.scaffold/'/>" \
	>> $mySCAFFOLDDRIVER

	echo "</Experiment>" \
	>> $mySCAFFOLDDRIVER

	echo "</Scaffold>" \
	>> $mySCAFFOLDDRIVER
}

#touch /tmp/simon_20130506

myScaffoldDriverGenerator
test $? -gt 0 && die "'myScaffoldDriverGenerator' failed"

test -s $mySCAFFOLDDRIVER || die "no SCAFFOLDDRIVER file found."
nice -15 $mySCAFFOLD $mySCAFFOLDDRIVER || die "SCAFFOLD failed."

# BEGIN WRITING THE OUTPUT BACK
TEMPDIR=$SCRATCHSPACE/$$.scaffold/
output2wu `ls -rt $SCRATCHSPACE/$$.scaffold/ | grep ".sf3$"| head -n 1`
# END WRITING THE OUTPUT BACK

# BEGIN CLEAN THE SYSTEM
rm -fv $SCRATCHSPACE/$$.*.xml $SCRATCHSPACE/$$.scaffold/*
test $? -gt 0 && die "cleaning failed"
 
rmdir $SCRATCHSPACE/$$.scaffold
test $? -gt 0 && die "cleaning failed"

exit 0

